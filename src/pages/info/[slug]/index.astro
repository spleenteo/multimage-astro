---
import BaseLayout from '~/layouts/BaseLayout.astro';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { toPlainText, toRichTextHtml } from '~/lib/text';
import { withFallbackSeo } from '~/lib/seo';
import type { PageRecord, SeoMetaTag } from '~/lib/datocms/types';

export const prerender = true;

const PAGE_DETAIL_QUERY = /* GraphQL */ `
  query InfoPage($slug: String) {
    page(filter: { slug: { eq: $slug } }) {
      id
      title
      subtitle
      slug
      body
      label
      menu
      seo {
        title
        description
        image {
          url
          alt
        }
      }
      _seoMetaTags {
        tag
        attributes
        content
      }
    }
  }
`;

type InfoPageQueryResult = {
  page: (PageRecord & { _seoMetaTags: SeoMetaTag[] | null }) | null;
};

type InfoPageSlugsResult = {
  allPages: Array<{
    slug: string | null;
  }>;
};

export async function getStaticPaths() {
  const SLUGS_QUERY = /* GraphQL */ `
    query InfoPageSlugs {
      allPages(first: 200) {
        slug
      }
    }
  `;

  const data = await executeQuery<InfoPageSlugsResult>(SLUGS_QUERY);

  return (data.allPages ?? [])
    .map((entry) => entry.slug)
    .filter((slug): slug is string => Boolean(slug))
    .map((slug) => ({ params: { slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Missing info page slug');
}

const data = await executeQuery<InfoPageQueryResult>(PAGE_DETAIL_QUERY, {
  variables: { slug },
});

const page = data.page;

if (!page) {
  throw new Error(`Info page not found for slug: ${slug}`);
}

const heroTitle = page.title ?? 'Info';
const heroSubtitle = toPlainText(page.subtitle ?? null);
const heroDescription = heroSubtitle.length > 0 ? heroSubtitle : undefined;

const bodyHtml = toRichTextHtml(page.body ?? null);

const sectionLabel = toPlainText(page.label ?? null) || 'Info Multimage';

const seo = withFallbackSeo(page._seoMetaTags, {
  title: `${heroTitle} | Multimage`,
  description: heroDescription,
});
---

<BaseLayout seo={seo}>
  <article class="space-y-12">
    <section class="border border-white/70 bg-white/95 py-12 shadow-soft">
      <div class="mx-auto flex max-w-4xl flex-col gap-4 px-6 text-center md:gap-6">
        <p class="text-xs font-semibold uppercase tracking-[0.35em] text-brand-slate">
          {sectionLabel}
        </p>
        <h1 class="text-4xl font-serif text-brand-navy md:text-5xl">{heroTitle}</h1>
        {
          heroDescription ? (
            <p class="text-base leading-relaxed text-brand-charcoal/80">{heroDescription}</p>
          ) : null
        }
      </div>
    </section>

    <section class="mx-auto max-w-4xl space-y-6 bg-white/95 px-6 py-10 shadow-soft">
      {
        bodyHtml ? (
          <div
            class="space-y-5 text-base leading-relaxed text-brand-charcoal/90 [&_h2]:mt-10 [&_h2]:text-3xl [&_h2]:font-serif [&_h2]:text-brand-navy [&_h3]:mt-8 [&_h3]:text-2xl [&_h3]:font-serif [&_h3]:text-brand-navy [&_h4]:mt-6 [&_h4]:text-xl [&_a]:text-brand-sky [&_a:hover]:text-brand-navy [&_strong]:text-brand-charcoal [&_ul]:list-disc [&_ul]:pl-6 [&_ol]:list-decimal [&_ol]:pl-6 [&_blockquote]:border-l-4 [&_blockquote]:border-brand-sky [&_blockquote]:pl-4 [&_blockquote]:italic"
            set:html={bodyHtml}
          />
        ) : (
          <p class="text-sm text-brand-slate">
            I contenuti di questa pagina saranno disponibili a breve.
          </p>
        )
      }
    </section>
  </article>
</BaseLayout>
