---
import BaseLayout from '~/layouts/BaseLayout.astro';
import { StructuredText } from '@datocms/astro/StructuredText';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { toPlainText } from '~/lib/text';
import { withFallbackSeo } from '~/lib/seo';
import styles from './_style.module.css';
import { INFO_PAGE_QUERY, INFO_PAGE_SLUGS_QUERY } from './_graphql';
import type { PageRecord, SeoMetaTag } from '~/lib/datocms/types';
import { hasStructuredTextContent } from '~/lib/datocms/structuredText';
import {
  defaultBlockComponents,
  defaultLinkToRecordComponents,
} from '~/lib/datocms/structuredTextComponents';

export const prerender = true;

export type InfoPageQueryResult = {
  page: (PageRecord & { _seoMetaTags: SeoMetaTag[] | null }) | null;
};

export type InfoPageSlugsResult = {
  allPages: Array<{
    slug: string | null;
  }>;
};

export async function getStaticPaths() {
  const data = await executeQuery<InfoPageSlugsResult>(INFO_PAGE_SLUGS_QUERY);

  return (data.allPages ?? [])
    .map((entry) => entry.slug)
    .filter((slug): slug is string => Boolean(slug))
    .map((slug) => ({ params: { slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Missing info page slug');
}

const data = await executeQuery<InfoPageQueryResult>(INFO_PAGE_QUERY, {
  variables: { slug },
});

const page = data.page;

if (!page) {
  throw new Error(`Info page not found for slug: ${slug}`);
}

const heroTitle = page.title ?? 'Info';
const heroSubtitle = toPlainText(page.subtitle ?? null);
const heroDescription = heroSubtitle.length > 0 ? heroSubtitle : undefined;
const hasBodyContent = hasStructuredTextContent(page.body);
const sectionLabel = toPlainText(page.label ?? null) || 'Info Multimage';

const seo = withFallbackSeo(page._seoMetaTags, {
  title: `${heroTitle} | Multimage`,
  description: heroDescription,
});
---

<BaseLayout seo={seo}>
  <article class={styles.layout}>
    <section class={styles.heroSection}>
      <div class={styles.heroContent}>
        <p class={styles.label}>{sectionLabel}</p>
        <h1 class={styles.title}>{heroTitle}</h1>
        {heroDescription ? <p class={styles.subtitle}>{heroDescription}</p> : null}
      </div>
    </section>

    <section class={styles.bodySection}>
      {
        hasBodyContent && page.body ? (
          <div class={styles.bodyContent}>
            <StructuredText
              data={page.body as any}
              blockComponents={defaultBlockComponents as any}
              linkToRecordComponents={defaultLinkToRecordComponents as any}
            />
          </div>
        ) : (
          <p class="text-sm text-brand-slate">
            I contenuti di questa pagina saranno disponibili a breve.
          </p>
        )
      }
    </section>
  </article>
</BaseLayout>
