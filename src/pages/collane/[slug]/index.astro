---
import BaseLayout from '~/layouts/BaseLayout.astro';
import CollectionDetailHero from '~/components/CollectionDetailHero';
import BookCard from '~/components/BookCard';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { toPlainText } from '~/lib/text';
import { mapBooksToCards } from '~/lib/books';
import { withFallbackSeo } from '~/lib/seo';
import styles from './_style.module.css';
import {
  COLLECTION_DETAIL_QUERY,
  COLLECTION_RELATED_BOOKS_QUERY,
  COLLECTION_SLUGS_QUERY,
  type CollectionDetailResult,
  type CollectionRelatedBooksResult,
  type CollectionSlugsResult,
} from './_graphql';

export const prerender = true;

export async function getStaticPaths() {
  const data = await executeQuery<CollectionSlugsResult>(COLLECTION_SLUGS_QUERY);

  return (data.allCollections ?? [])
    .map((collection) => collection.slug)
    .filter((slug): slug is string => Boolean(slug))
    .map((slug) => ({ params: { slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Missing collection slug');
}

const detailData = await executeQuery<CollectionDetailResult>(COLLECTION_DETAIL_QUERY, {
  variables: { slug },
});

const collection = detailData.collection;

if (!collection) {
  throw new Error(`Collection not found for slug: ${slug}`);
}

const relatedData = await executeQuery<CollectionRelatedBooksResult>(
  COLLECTION_RELATED_BOOKS_QUERY,
  {
    variables: { collectionId: collection.id },
  },
);

const collectionName = collection.name ?? 'Collana senza titolo';
const descriptionPlain = toPlainText(collection.description ?? null);
const collectionDescription = descriptionPlain.length > 0 ? descriptionPlain : null;
const booksCount = relatedData._allBooksMeta?.count ?? 0;
const relatedBooks = mapBooksToCards(relatedData.allBooks);
const seo = withFallbackSeo(collection._seoMetaTags, {
  title: `${collectionName} | Multimage`,
  description: collectionDescription ?? undefined,
});
---

<BaseLayout seo={seo}>
  <article class={styles.layout}>
    <CollectionDetailHero
      name={collectionName}
      booksCount={booksCount}
      description={collectionDescription}
      logo={collection.logo}
    />

    <section class={styles.booksSection}>
      {
        relatedBooks.length === 0 ? (
          <p class="text-sm text-brand-slate">Nessun libro presente in questa collana.</p>
        ) : (
          <div class={styles.booksGrid}>
            {relatedBooks.map((book) => (
              <BookCard
                title={book.title}
                slug={book.slug}
                subtitle={book.subtitle}
                summary={book.summary}
                coverImage={book.coverImage}
                authors={book.authors}
                license={book.license}
                format={book.format}
                price={book.price}
                isArchived={book.isArchived}
              />
            ))}
          </div>
        )
      }
    </section>
  </article>
</BaseLayout>
