---
import BaseLayout from '~/layouts/BaseLayout.astro';
import CollectionDetailHero from '~/components/CollectionDetailHero.astro';
import BookCard from '~/components/BookCard.astro';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { toPlainText } from '~/lib/text';
import { mapBooksToCards } from '~/lib/books';
import { withFallbackSeo } from '~/lib/seo';
import { RESPONSIVE_IMAGE_FRAGMENT } from '~/lib/datocms/commonFragments';
import type { BookRecordForCard } from '~/lib/books';
import type { CollectionSummaryRecord, SeoMetaTag } from '~/lib/datocms/types';

export const prerender = true;

const COLLECTION_DETAIL_QUERY = /* GraphQL */ `
  ${RESPONSIVE_IMAGE_FRAGMENT}
  query CollectionDetailPage($slug: String) {
    collection(filter: { slug: { eq: $slug } }) {
      id
      name
      description
      slug
      logo {
        url
        alt
        responsiveImage(imgixParams: { fit: max, w: 320, auto: format }) {
          ...ResponsiveImageFragment
        }
      }
      _seoMetaTags {
        tag
        attributes
        content
      }
    }
  }
`;

const COLLECTION_RELATED_BOOKS_QUERY = /* GraphQL */ `
  ${RESPONSIVE_IMAGE_FRAGMENT}
  query CollectionRelatedBooks($collectionId: ItemId) {
    _allBooksMeta(filter: { collection: { eq: $collectionId } }) {
      count
    }
    allBooks(filter: { collection: { eq: $collectionId } }, orderBy: title_ASC, first: 60) {
      id
      title
      subtitle
      slug
      promo
      description
      coverImage {
        url
        alt
        colors {
          hex
        }
        responsiveImage(imgixParams: { fit: max, w: 520, auto: format }) {
          ...ResponsiveImageFragment
        }
      }
      authors {
        id
        fullName
        alias
        slug
      }
      license {
        name
        code
      }
      format
      price
      archive
    }
  }
`;

type CollectionDetailResult = {
  collection: (CollectionSummaryRecord & { _seoMetaTags: SeoMetaTag[] | null }) | null;
};

type CollectionRelatedBooksResult = {
  _allBooksMeta: {
    count: number;
  } | null;
  allBooks: BookRecordForCard[];
};

type CollectionSlugsResult = {
  allCollections: Array<{
    slug: string | null;
  }>;
};

export async function getStaticPaths() {
  const slugsQuery = /* GraphQL */ `
    query CollectionSlugsForStaticPaths {
      allCollections(orderBy: name_ASC) {
        slug
      }
    }
  `;

  const data = await executeQuery<CollectionSlugsResult>(slugsQuery);

  return (data.allCollections ?? [])
    .map((collection) => collection.slug)
    .filter((slug): slug is string => Boolean(slug))
    .map((slug) => ({ params: { slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Missing collection slug');
}

const detailData = await executeQuery<CollectionDetailResult>(COLLECTION_DETAIL_QUERY, {
  variables: { slug },
});

const collection = detailData.collection;

if (!collection) {
  throw new Error(`Collection not found for slug: ${slug}`);
}

const relatedData = await executeQuery<CollectionRelatedBooksResult>(
  COLLECTION_RELATED_BOOKS_QUERY,
  {
    variables: { collectionId: collection.id },
  },
);

const collectionName = collection.name ?? 'Collana senza titolo';
const descriptionPlain = toPlainText(collection.description ?? null);
const collectionDescription = descriptionPlain.length > 0 ? descriptionPlain : null;
const booksCount = relatedData._allBooksMeta?.count ?? 0;
const relatedBooks = mapBooksToCards(relatedData.allBooks);
const seo = withFallbackSeo(collection._seoMetaTags, {
  title: `${collectionName} | Multimage`,
  description: collectionDescription ?? undefined,
});
---

<BaseLayout seo={seo}>
  <article class="space-y-12">
    <CollectionDetailHero
      name={collectionName}
      booksCount={booksCount}
      description={collectionDescription}
      logo={collection.logo}
    />

    {
      relatedBooks.length === 0 ? (
        <p class="text-brand-slate">Nessun libro presente in questa collana.</p>
      ) : (
        <div class="grid gap-8 sm:grid-cols-2 xl:grid-cols-3">
          {relatedBooks.map((book) => (
            <BookCard
              title={book.title}
              slug={book.slug}
              subtitle={book.subtitle}
              summary={book.summary}
              coverImage={book.coverImage}
              authors={book.authors}
              license={book.license}
              format={book.format}
              price={book.price}
              isArchived={book.isArchived}
            />
          ))}
        </div>
      )
    }
  </article>
</BaseLayout>
