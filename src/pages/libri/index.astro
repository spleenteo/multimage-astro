---
import BaseLayout from '~/layouts/BaseLayout.astro';
import SectionIntro from '~/components/SectionIntro.astro';
import BookCard from '~/components/BookCard.astro';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { graphql } from '~/lib/datocms/graphql';
import { toPlainText } from '~/lib/text';
import { withFallbackSeo } from '~/lib/seo';
import { mapBooksToCards } from '~/lib/books';

export const prerender = true;

const BOOKS_PAGE_QUERY = graphql(/* GraphQL */ `
  query BooksPage {
    booksIndex {
      title
      subtitle
      _seoMetaTags {
        tag
        attributes
        content
      }
    }
    allBooks(
      orderBy: printYear_DESC
      first: 500
      filter: { _status: { eq: published }, archive: { eq: false } }
    ) {
      id
      title
      subtitle
      slug
      promo
      description
      printYear
      coverImage {
        url
        alt
        colors {
          hex
        }
        width
        height
      }
      price
      authors {
        id
        fullName
      }
      license {
        name
        code
      }
      format
      archive
    }
  }
`);
type SeoMetaTag = {
  tag: string;
  attributes: Record<string, string> | null;
  content: string | null;
};

type BooksPageQueryResult = {
  booksIndex: {
    title: string | null;
    subtitle: string | null;
    _seoMetaTags: SeoMetaTag[] | null;
  } | null;
  allBooks: Array<{
    id: string;
    title: string;
    subtitle: string | null;
    slug: string;
    promo: string | null;
    description: string | null;
    coverImage: {
      url: string;
      alt: string | null;
      colors?: Array<{ hex: string }>;
      width: number | null;
      height: number | null;
    } | null;
    printYear: string | null;
    authors: Array<{
      id: string;
      fullName: string | null;
    }>;
    license: {
      name: string | null;
      code: string | null;
    } | null;
    format: string | null;
    archive: boolean | null;
    price: number | null;
  }>;
};

const data = (await executeQuery(BOOKS_PAGE_QUERY)) as BooksPageQueryResult;

const heroTitle = data.booksIndex?.title ?? 'Libri';
const heroSubtitle = toPlainText(data.booksIndex?.subtitle ?? null);
const heroDescription = heroSubtitle.length > 0 ? heroSubtitle : undefined;
const seo = withFallbackSeo(data.booksIndex?._seoMetaTags, {
  title: heroTitle,
  description: heroDescription,
});

const books = mapBooksToCards(data.allBooks);
---

<BaseLayout seo={seo}>
  <section class="space-y-12">
    <div class="mx-auto max-w-5xl">
      <SectionIntro title={heroTitle} description={heroDescription} align="center" />
    </div>

    {
      books.length === 0 ? (
        <p class="bg-white/80 p-6 text-center text-brand-slate shadow-soft">
          Il catalogo sar√† disponibile a breve.
        </p>
      ) : (
        <div class="mx-auto max-w-6xl">
          <div class="grid gap-8 md:grid-cols-2 xl:grid-cols-3">
            {books.map((book) => (
              <BookCard
                title={book.title}
                slug={book.slug}
                subtitle={book.subtitle}
                summary={book.summary}
                coverImage={book.coverImage}
                authors={book.authors}
                license={book.license}
                format={book.format}
                price={book.price}
                isArchived={book.isArchived}
              />
            ))}
          </div>
        </div>
      )
    }
  </section>
</BaseLayout>
