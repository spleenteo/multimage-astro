---
import { Image } from '@datocms/astro/Image';
import BaseLayout from '~/layouts/BaseLayout.astro';
import BookCard from '~/components/BookCard';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { mapBooksToCards } from '~/lib/books';
import { getAuthorDisplayName } from '~/lib/authors';
import { toPlainText, toRichTextHtml } from '~/lib/text';
import { withFallbackSeo } from '~/lib/seo';
import styles from './_style.module.css';
import {
  AUTHOR_DETAIL_QUERY,
  AUTHOR_RELATED_BOOKS_QUERY,
  AUTHOR_SLUGS_QUERY,
  type AuthorDetailResult,
  type AuthorRelatedBooksResult,
  type AuthorSlugsResult,
} from './_graphql';

export const prerender = true;

export async function getStaticPaths() {
  const data = await executeQuery<AuthorSlugsResult>(AUTHOR_SLUGS_QUERY);

  return (data.allAuthors ?? [])
    .map((author) => author.slug)
    .filter((slug): slug is string => Boolean(slug))
    .map((slug) => ({ params: { slug } }));
}

const { slug } = Astro.params;

if (!slug) {
  throw new Error('Missing author slug');
}

const detailData = await executeQuery<AuthorDetailResult>(AUTHOR_DETAIL_QUERY, {
  variables: { slug },
});

const author = detailData.author;

if (!author) {
  throw new Error(`Author not found for slug: ${slug}`);
}

const relatedData = await executeQuery<AuthorRelatedBooksResult>(AUTHOR_RELATED_BOOKS_QUERY, {
  variables: { authorIds: [author.id] },
});

const booksCount = relatedData._allBooksMeta?.count ?? relatedData.allBooks.length ?? 0;
const relatedBooks = mapBooksToCards(relatedData.allBooks);

const authorDisplayName = getAuthorDisplayName(author);
const biographyHtml = toRichTextHtml(author.biography ?? null);
const biographyPlain = toPlainText(author.biography ?? null);
const noteHtml = toRichTextHtml(author.note ?? null);
const notePlain = toPlainText(author.note ?? null);
const summarySource = biographyPlain.length > 0 ? biographyPlain : notePlain;
const booksLabel = booksCount === 1 ? '1 libro in catalogo' : `${booksCount} libri in catalogo`;

const pseudonyms = (author.pseudonyms ?? [])
  .map((person) => ({
    id: person.id,
    name: getAuthorDisplayName(person),
    slug: person.slug ?? null,
  }))
  .filter((person) => person.name.length > 0);

const fallbackDescription = summarySource.length > 0 ? summarySource : undefined;
const seo = withFallbackSeo(author._seoMetaTags, {
  title: `${authorDisplayName} | Multimage`,
  description: fallbackDescription || undefined,
});

const pictureResponsiveImage = author.picture?.responsiveImage
  ? {
      ...author.picture.responsiveImage,
      alt: author.picture.responsiveImage.alt ?? authorDisplayName,
    }
  : null;
---

<BaseLayout seo={seo}>
  <article class={styles.layout}>
    <section class={styles.heroGrid}>
      <div class={styles.portraitPanel}>
        <div class={styles.portraitFrame}>
          {
            pictureResponsiveImage ? (
              <Image
                data={pictureResponsiveImage}
                sizes="(min-width: 1024px) 320px, 60vw"
                imgClass="h-auto w-full object-cover"
              />
            ) : (
              <div class={styles.portraitFallback}>Ritratto in arrivo</div>
            )
          }
        </div>
      </div>

      <div class={styles.detailCard}>
        <div class="space-y-3">
          {author.country ? <p class={styles.metaLabel}>{author.country}</p> : null}
          <h1 class={styles.name}>{authorDisplayName}</h1>
          <p class={styles.booksLabel}>{booksLabel}</p>
        </div>

        {
          pseudonyms.length > 0 ? (
            <div class="space-y-2 pt-4">
              <p class={styles.metaLabel}>Pseudonimi</p>
              <div class={styles.pseudonyms}>
                {pseudonyms.map((person) =>
                  person.slug ? (
                    <a href={`/autori/${person.slug}`} class={styles.pseudonymLink}>
                      {person.name}
                    </a>
                  ) : (
                    <span>{person.name}</span>
                  ),
                )}
              </div>
            </div>
          ) : null
        }
      </div>
    </section>

    <section class={styles.contentSection}>
      {
        biographyHtml ? (
          <div class={styles.contentBlock}>
            <h2 class="text-3xl font-serif text-brand-navy">Biografia</h2>
            <div set:html={biographyHtml} />
          </div>
        ) : null
      }

      {
        noteHtml ? (
          <div class={styles.contentBlock}>
            <h2 class="text-3xl font-serif text-brand-navy">Note</h2>
            <div set:html={noteHtml} />
          </div>
        ) : null
      }
    </section>

    <section class={styles.booksSection}>
      <h2 class={styles.booksHeader}>Libri pubblicati</h2>
      {
        relatedBooks.length === 0 ? (
          <p class="text-sm text-brand-slate">Nessun libro ancora associato a questo autore.</p>
        ) : (
          <div class={styles.booksGrid}>
            {relatedBooks.map((book) => (
              <BookCard
                title={book.title}
                slug={book.slug}
                subtitle={book.subtitle}
                summary={book.summary}
                coverImage={book.coverImage}
                authors={book.authors}
                license={book.license}
                format={book.format}
                price={book.price}
                isArchived={book.isArchived}
              />
            ))}
          </div>
        )
      }
    </section>
  </article>
</BaseLayout>
