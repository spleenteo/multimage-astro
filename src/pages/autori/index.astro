---
import BaseLayout from '~/layouts/BaseLayout.astro';
import SectionIntro from '~/components/SectionIntro';
import AuthorCard from '~/components/AuthorCard';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { toPlainText } from '~/lib/text';
import { mapAuthorsToCards, sortAuthorsForIndex } from '~/lib/authors';
import { withFallbackSeo } from '~/lib/seo';
import styles from './index/_style.module.css';
import { AUTHORS_PAGE_QUERY, type AuthorsPageQueryResult } from './index/_graphql';

export const prerender = true;

const data = await executeQuery<AuthorsPageQueryResult>(AUTHORS_PAGE_QUERY);

const heroTitle = data.authorsIndex?.title ?? 'Autori';
const heroSubtitle = toPlainText(data.authorsIndex?.subtitle ?? null);
const heroDescription = heroSubtitle.length > 0 ? heroSubtitle : undefined;
const seo = withFallbackSeo(data.authorsIndex?._seoMetaTags, {
  title: heroTitle,
  description: heroDescription,
});

const bookCounts = new Map<string, number>();
for (const book of data.allBooks ?? []) {
  for (const author of book.authors ?? []) {
    if (!author?.id) continue;
    bookCounts.set(author.id, (bookCounts.get(author.id) ?? 0) + 1);
  }
}

const sortedAuthors = sortAuthorsForIndex(data.allAuthors ?? []);
const authorCards = mapAuthorsToCards(sortedAuthors, { bookCounts }).filter(
  (author) => author.slug.length > 0,
);

type AuthorCardItem = (typeof authorCards)[number];

function buildAnchorSegment(letter: string) {
  const normalized = letter.normalize('NFD').replace(/[\u0300-\u036f]/g, '');
  const cleaned = normalized.replace(/[^A-Za-z0-9]/g, '');
  return cleaned.length > 0 ? cleaned.toLowerCase() : 'other';
}

const authorGroupsMap = new Map<
  string,
  {
    letter: string;
    anchorId: string;
    authors: AuthorCardItem[];
  }
>();

for (const author of authorCards) {
  const letter = author.sortLetter || '#';
  const anchorId = `group-${buildAnchorSegment(letter)}`;
  if (!authorGroupsMap.has(letter)) {
    authorGroupsMap.set(letter, { letter, anchorId, authors: [] as AuthorCardItem[] });
  }
  authorGroupsMap.get(letter)?.authors.push(author);
}

const authorGroups = Array.from(authorGroupsMap.values());
const navigationAnchors = authorGroups.map(({ letter, anchorId }) => ({ letter, anchorId }));
---

<BaseLayout seo={seo}>
  <section class={styles.section}>
    <div class={styles.intro}>
      <SectionIntro title={heroTitle} description={heroDescription} align="center" />
    </div>

    {
      authorCards.length === 0 ? (
        <p class={styles.empty}>Gli autori saranno disponibili a breve.</p>
      ) : (
        <div class={styles.container}>
          <div id="char-menu" class="sr-only" aria-hidden="true" />

          <nav class={styles.nav} aria-label="Indice alfabetico autori">
            {navigationAnchors.map(({ letter, anchorId }) => (
              <a href={`#${anchorId}`} class={styles.navLink}>
                {letter}
              </a>
            ))}
          </nav>

          <div class={styles.groupList}>
            {authorGroups.map(({ letter, anchorId, authors }) => (
              <section id={anchorId} class="space-y-8">
                <div class={styles.groupHeader}>
                  <h2 class={styles.groupTitle}>{letter}</h2>
                  <a href="#char-menu" class={styles.backLink}>
                    Torna al menu
                  </a>
                </div>

                <div class={styles.authorsGrid}>
                  {authors.map((author) => (
                    <AuthorCard
                      name={author.name}
                      slug={author.slug}
                      alias={author.alias}
                      country={author.country}
                      summary={author.summary}
                      booksCount={author.booksCount}
                      picture={author.picture}
                    />
                  ))}
                </div>
              </section>
            ))}
          </div>
        </div>
      )
    }
  </section>
</BaseLayout>
