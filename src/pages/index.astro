---
import BaseLayout from '~/layouts/BaseLayout.astro';
import BannerSection from '~/components/BannerSection';
import FeaturedBookHighlight from '~/components/FeaturedBookHighlight';
import { Image } from '@datocms/astro/Image';
import { executeQuery } from '~/lib/datocms/executeQuery';
import { withFallbackSeo } from '~/lib/seo';
import { toPlainText, toRichTextHtml } from '~/lib/text';
import { toBookCard, formatBookPrice } from '~/lib/books';
import { formatAuthorNames, getAuthorDisplayName } from '~/lib/authors';
import type { AssetColor, ResponsiveImage } from '~/lib/datocms/types';
import styles from './index/_style.module.css';
import {
  HOME_PAGE_QUERY,
  type HomeBannerBannerBlockRecord,
  type HomeSingleBookBlockRecord,
  type HomeBannerBlockRecord,
  type HomePageQueryResult,
} from './index/_graphql';

export const prerender = true;

const FEATURE_LINKS = [
  {
    href: '/libri',
    title: 'Catalogo libri',
    icon: 'iconoir:book',
    description:
      'Sfoglia le pubblicazioni dedicate a diritti umani, nonviolenza e trasformazione sociale.',
  },
  {
    href: '/autori',
    title: 'Autrici e autori',
    icon: 'iconoir:community',
    description:
      'Approfondimenti biografici, interviste e opere dei protagonisti del catalogo Multimage.',
  },
  {
    href: '/collane',
    title: 'Collane editoriali',
    icon: 'iconoir:bookmark-book',
    description: 'Percorsi tematici. serie storiche, raccolte e.',
  },
] as const;

type HomeBannerSectionData = {
  id: string;
  title: string | null;
  contentHtml: string | null;
  link: string | null;
  imagePosition: 'left' | 'right';
  image: (ResponsiveImage & { title?: string | null }) | null;
  colors: AssetColor[] | null;
};

type HomeSingleBookHighlightData = {
  book: {
    title: string;
    subtitle?: string | null;
    summary?: string | null;
    priceLabel?: string | null;
    format?: string | null;
    printYear?: string | null;
    isArchived?: boolean;
    link?: string | null;
    authorsLabel?: string | null;
  };
  coverImage: (ResponsiveImage & { title?: string | null }) | null;
  coverColors: AssetColor[] | null;
  collectionLabel: string | null;
  collectionHref: string | null;
  label: string | null;
  author: {
    name: string;
    slug?: string | null;
    link?: string | null;
    booksCount?: number | null;
    picture?: ResponsiveImage | null;
    pictureAlt?: string | null;
  } | null;
};

type HomeBannerEntry =
  | { kind: 'banner'; id: string; data: HomeBannerSectionData }
  | { kind: 'singleBook'; id: string; data: HomeSingleBookHighlightData };

const { home } = await executeQuery<HomePageQueryResult>(HOME_PAGE_QUERY);

const defaultTitle = 'La casa editrice dei diritti umani';
const defaultClaimHtml = `<p>Multimage promuove libri, autori e iniziative che raccontano i diritti umani, la nonviolenza e le storie spesso dimenticate. Questa nuova applicazione Astro riprende colori e tipografia dell'esperienza originale per offrire una base moderna e accessibile.</p>`;

const heroTitle = home?.title?.trim() || defaultTitle;
const heroClaimHtml = toRichTextHtml(home?.claim) ?? defaultClaimHtml;
const heroClaimText = toPlainText(heroClaimHtml);

const heroResponsiveImage = home?.heroImage?.responsiveImage ?? null;
const heroImageAlt = home?.heroImage?.alt?.trim() ?? `${heroTitle} | Multimage`;

const heroImageData = heroResponsiveImage
  ? {
      ...heroResponsiveImage,
      alt: heroResponsiveImage.alt ?? heroImageAlt,
      title: heroResponsiveImage.title ?? heroTitle,
    }
  : null;

const bannerBlocks: HomeBannerBlockRecord[] = home?.banners ?? [];
const homeBannerEntries = bannerBlocks
  .map<HomeBannerEntry | null>((block) => {
    if (block?.__typename === 'BannerRecord') {
      const bannerBlock = block as HomeBannerBannerBlockRecord;
      const trimmedTitle = bannerBlock.title?.trim() ?? null;
      const contentHtml = toRichTextHtml(bannerBlock.content) ?? null;
      const link = bannerBlock.link?.trim() ?? null;
      const position = bannerBlock.imagePosition === 'left' ? 'left' : 'right';
      const featuredImage = bannerBlock.featuredImage ?? null;
      const responsiveImage = featuredImage?.responsiveImage ?? null;
      const fallbackAlt = featuredImage?.alt?.trim() ?? trimmedTitle ?? 'Illustrazione';
      const fallbackTitle = featuredImage?.title?.trim() ?? trimmedTitle ?? fallbackAlt;
      const image = responsiveImage
        ? {
            ...responsiveImage,
            alt: responsiveImage.alt ?? fallbackAlt,
            title: responsiveImage.title ?? fallbackTitle,
          }
        : null;

      return {
        kind: 'banner',
        id: bannerBlock.id,
        data: {
          id: bannerBlock.id,
          title: trimmedTitle,
          contentHtml,
          link,
          imagePosition: position,
          image,
          colors: featuredImage?.colors ?? null,
        },
      } satisfies HomeBannerEntry;
    }

    if (block?.__typename === 'SingleBookRecord') {
      const singleBookBlock = block as HomeSingleBookBlockRecord;
      const singleBook = singleBookBlock.book ? toBookCard(singleBookBlock.book) : null;
      if (!singleBook) {
        return null;
      }

      const collection = singleBookBlock.book?.collection ?? null;
      const collectionName = collection?.name?.trim() ?? null;
      const collectionSlug = collection?.slug?.trim() ?? null;
      const collectionHref = collectionSlug ? `/collane/${collectionSlug}` : null;
      const collectionLabel = collectionName ? `Collana ${collectionName}` : null;
      const priceLabel = formatBookPrice(singleBook.price ?? null);
      const authorsLabel = formatAuthorNames(singleBook.authors ?? []);
      const bookLink = `/libri/${singleBook.slug}`;
      const responsiveImage = singleBookBlock.book?.coverImage?.responsiveImage ?? null;
      const fallbackAlt = singleBookBlock.book?.coverImage?.alt?.trim() ?? singleBook.title;
      const fallbackTitle = singleBookBlock.book?.coverImage?.title?.trim() ?? fallbackAlt;
      const coverImage = responsiveImage
        ? {
            ...responsiveImage,
            alt: responsiveImage.alt ?? fallbackAlt,
            title: responsiveImage.title ?? fallbackTitle,
          }
        : null;
      const primaryAuthorSource = singleBookBlock.book?.authors?.[0] ?? null;
      const authorName = primaryAuthorSource ? getAuthorDisplayName(primaryAuthorSource) : null;
      const authorPicture = primaryAuthorSource?.picture?.responsiveImage ?? null;
      const authorPictureAlt =
        primaryAuthorSource?.picture?.alt ??
        primaryAuthorSource?.fullName ??
        authorName ??
        'Ritratto autore';
      const author =
        authorName && primaryAuthorSource
          ? {
              name: authorName,
              slug: primaryAuthorSource.slug ?? null,
              link: primaryAuthorSource.slug ? `/autori/${primaryAuthorSource.slug}` : null,
              booksCount: null,
              picture: authorPicture,
              pictureAlt: authorPictureAlt,
            }
          : null;
      const formatValue = singleBook.format?.trim() ?? null;
      const printYear = singleBook.printYear ?? null;

      return {
        kind: 'singleBook',
        id: singleBookBlock.id,
        data: {
          book: {
            title: singleBook.title,
            subtitle: singleBook.subtitle ?? null,
            summary: singleBook.summary ?? undefined,
            priceLabel: priceLabel ?? undefined,
            format: formatValue ?? undefined,
            printYear: printYear ?? undefined,
            isArchived: singleBook.isArchived,
            link: bookLink,
            authorsLabel,
          },
          coverImage,
          coverColors: singleBookBlock.book?.coverImage?.colors ?? null,
          collectionLabel,
          collectionHref,
          label: 'Libro consigliato',
          author,
        },
      } satisfies HomeBannerEntry;
    }

    return null;
  })
  .filter((entry): entry is HomeBannerEntry => entry !== null);

const seo = withFallbackSeo(home?._seoMetaTags, {
  title: heroTitle.includes('Multimage') ? heroTitle : `${heroTitle} | Multimage`,
  description: heroClaimText,
});
---

<BaseLayout seo={seo}>
  <div class="space-y-12">
    <section
      class:list={[
        styles.heroSection,
        'relative overflow-hidden bg-brand-charcoal text-white shadow-soft min-h-[45vh]',
      ]}
    >
      {
        heroImageData ? (
          <Image
            data={heroImageData}
            sizes="(min-width: 1280px) 1200px, 100vw"
            pictureClass="absolute inset-0 block h-full w-full"
            imgClass="h-full w-full object-cover"
            imgStyle={{ objectFit: 'cover', width: '100%', height: '100%', maxWidth: 'none' }}
            priority
          />
        ) : (
          <div class="absolute inset-0 bg-brand-navy" aria-hidden="true" />
        )
      }
      <div class="absolute inset-0 bg-black/45" aria-hidden="true"></div>
      <div
        class:list={[
          'relative z-10 mx-auto flex min-h-[360px] w-full max-w-5xl flex-col items-center justify-center gap-6 px-6 py-24 text-center md:min-h-[45vh] md:px-12',
          styles.heroContent,
        ]}
      >
        <h1 class="text-4xl font-serif tracking-tight text-white md:text-5xl lg:text-6xl">
          {heroTitle}
        </h1>
        <div class="h-px w-20 bg-white/70"></div>
        {
          heroClaimHtml ? (
            <div
              class="max-w-3xl text-lg leading-relaxed text-white/90 md:text-xl [&_a]:text-white [&_a:hover]:text-white/80 [&_p:not(:last-child)]:mb-4"
              set:html={heroClaimHtml}
            />
          ) : null
        }
      </div>
    </section>

    {
      homeBannerEntries.length > 0 ? (
        <div class="space-y-10">
          {homeBannerEntries.map((entry) =>
            entry.kind === 'banner' ? (
              <BannerSection {...entry.data} />
            ) : (
              <FeaturedBookHighlight
                book={entry.data.book}
                coverImage={entry.data.coverImage}
                collectionLabel={entry.data.collectionLabel ?? undefined}
                collectionHref={entry.data.collectionHref ?? undefined}
                label={entry.data.label ?? undefined}
                author={entry.data.author ?? undefined}
                coverColors={entry.data.coverColors}
              />
            ),
          )}
        </div>
      ) : null
    }

    <section class="space-y-6">
      <h2>Cosa cerchi?</h2>
      <p>
        Le sezioni principali di una casa di edtrice sono senza dubbio i Libri, le autrici/autori e
        le collane editoriali che componono il nostro catalogo.
      </p>
      <div class="grid gap-6 md:grid-cols-3">
        {
          FEATURE_LINKS.map(({ href, title, description, icon }) => (
            <a
              href={href}
              class:list={[
                styles.featureCard,
                'group flex h-full flex-col justify-between bg-brand-mist p-6 text-brand-charcoal transition hover:bg-white',
              ]}
            >
              <div class="space-y-3">
                <span
                  class:list={[
                    styles.featureIcon,
                    'inline-flex h-12 w-12 items-center justify-center bg-white text-brand-navy',
                  ]}
                >
                  <iconify-icon icon={icon} width="24" height="24" aria-hidden="true" />
                </span>
                <h3 class="text-xl font-serif text-brand-navy group-hover:text-brand-sky">
                  {title}
                </h3>
                <p>{description}</p>
              </div>
              <span class="mt-6 inline-flex items-center gap-2 text-sm font-semibold uppercase tracking-wider text-brand-sky group-hover:text-brand-navy">
                <span>Scopri sezione</span>
                <iconify-icon
                  icon="iconoir:nav-arrow-right"
                  width="16"
                  height="16"
                  aria-hidden="true"
                />
              </span>
            </a>
          ))
        }
      </div>
    </section>
  </div>
</BaseLayout>
