---
import { Image } from '@datocms/astro/Image';
import { formatEuro } from '~/lib/currency';
import type { AssetColor, AssetImage } from '~/lib/datocms/types';

type Props = {
  title: string;
  slug: string;
  href?: string;
  subtitle?: string | null;
  summary?: string | null;
  format?: string | null;
  coverImage?: AssetImage | null;
  authors?: Array<{
    id: string;
    fullName?: string | null;
  }>;
  license?: {
    name?: string | null;
    code?: string | null;
  } | null;
  price?: number | null;
  className?: string;
  isArchived?: boolean | null;
};

const {
  title,
  slug,
  href,
  subtitle,
  summary,
  format,
  coverImage,
  authors = [],
  price,
  className = '',
  isArchived: archivedFlag = false,
}: Props = Astro.props;

const destination = href ?? `/libri/${slug}`;

const authorNames = authors
  .map((author) => author.fullName?.trim())
  .filter((name): name is string => Boolean(name));
const authorsLabel = authorNames.length > 0 ? authorNames.join(', ') : 'Autore in aggiornamento';
const normalizedFormat = format?.trim() ?? null;
const showFormatRibbon = normalizedFormat ? normalizedFormat.toLowerCase() !== 'cartaceo' : false;
const formatLabel = normalizedFormat ? normalizedFormat.toUpperCase() : null;

function pickBaseColor(colors: AssetColor[] | null | undefined) {
  if (!colors || colors.length === 0) {
    return '#E8EEF5';
  }
  const source = colors.slice(0, 3).find((color) => color?.hex) ?? colors[0];
  return source?.hex ?? '#E8EEF5';
}

function clamp(amount: number, min = 0, max = 1) {
  return Math.min(Math.max(amount, min), max);
}

function lightenColor(hex: string, amount = 0.2) {
  if (!/^#?[0-9A-Fa-f]{6}$/.test(hex)) {
    return '#F5F7FA';
  }
  const normalized = hex.startsWith('#') ? hex.slice(1) : hex;
  const num = Number.parseInt(normalized, 16);
  const r = (num >> 16) & 0xff;
  const g = (num >> 8) & 0xff;
  const b = num & 0xff;
  const blend = (component: number) => Math.round(component + (255 - component) * clamp(amount));
  const newR = blend(r).toString(16).padStart(2, '0');
  const newG = blend(g).toString(16).padStart(2, '0');
  const newB = blend(b).toString(16).padStart(2, '0');
  return `#${newR}${newG}${newB}`;
}

function darkenColor(hex: string, amount = 0.35) {
  if (!/^#?[0-9A-Fa-f]{6}$/.test(hex)) {
    return '#041C43';
  }
  const normalized = hex.startsWith('#') ? hex.slice(1) : hex;
  const num = Number.parseInt(normalized, 16);
  const r = (num >> 16) & 0xff;
  const g = (num >> 8) & 0xff;
  const b = num & 0xff;
  const blend = (component: number) => Math.round(component * (1 - clamp(amount)));
  const newR = blend(r).toString(16).padStart(2, '0');
  const newG = blend(g).toString(16).padStart(2, '0');
  const newB = blend(b).toString(16).padStart(2, '0');
  return `#${newR}${newG}${newB}`;
}

function hexToRgba(hex: string, alpha = 1) {
  if (!/^#?[0-9A-Fa-f]{6}$/.test(hex)) {
    return `rgba(4, 28, 67, ${alpha})`;
  }
  const normalized = hex.startsWith('#') ? hex.slice(1) : hex;
  const num = Number.parseInt(normalized, 16);
  const r = (num >> 16) & 0xff;
  const g = (num >> 8) & 0xff;
  const b = num & 0xff;
  return `rgba(${r}, ${g}, ${b}, ${alpha})`;
}

const baseColor = pickBaseColor(coverImage?.colors);
const backgroundColor = lightenColor(baseColor, 0.18);
const shadowColorHex = darkenColor(baseColor, 0.55);
const shadowColor = hexToRgba(shadowColorHex, 0.42);
const formattedPrice = formatEuro(price);
const coverResponsiveImage = coverImage?.responsiveImage ?? null;
const isArchived = archivedFlag === true;
---

<a
  href={destination}
  class={`group flex h-full flex-col overflow-hidden bg-white/95 ring-1 ring-brand-navy/5 shadow-soft transition duration-200 ease-out hover:-translate-y-1 hover:shadow-2xl focus:outline-none focus-visible:ring-2 focus-visible:ring-brand-sky focus-visible:ring-offset-2 ${className}`}
>
  <article class="flex h-full flex-col">
    <div class="relative w-full">
      <div
        class="relative flex w-full justify-center p-16 transition duration-300 ease-out group-hover:-translate-y-1 group-hover:shadow-soft"
        style={`background: ${backgroundColor};`}
      >
        {
          showFormatRibbon && formatLabel ? (
            <div class="pointer-events-none absolute left-6 top-6 z-10 inline-flex -rotate-12">
              <span class="bg-brand-sky/95 px-4 py-1 text-[0.65rem] font-semibold uppercase tracking-[0.25em] text-white shadow-soft">
                {formatLabel}
              </span>
            </div>
          ) : null
        }

        {
          isArchived ? (
            <div class="pointer-events-none absolute right-6 top-6 z-10 inline-flex rotate-12">
              <span class="bg-brand-slate px-4 py-1 text-[0.65rem] font-semibold uppercase tracking-[0.25em] text-white shadow-soft">
                Fuori catalogo
              </span>
            </div>
          ) : null
        }

        {
          coverResponsiveImage ? (
            <div class="relative flex items-center justify-center">
              <div
                class="pointer-events-none absolute left-1/2 top-full z-0 h-12 w-64 -translate-x-1/2 -translate-y-6 blur-[30px] transition duration-300 ease-out group-hover:opacity-10"
                style={`background: ${shadowColor};`}
                aria-hidden="true"
              />
              <Image
                data={coverResponsiveImage}
                sizes="(min-width: 1280px) 260px, (min-width: 1024px) 45vw, 70vw"
                imgClass="relative z-10 mx-auto h-56 w-auto max-w-[240px] object-contain"
                imgStyle={{ filter: `drop-shadow(26px 36px 48px ${shadowColor})` }}
              />
            </div>
          ) : (
            <div class="flex h-56 items-center justify-center bg-white/80 px-6 text-center text-xs font-semibold uppercase tracking-[0.2em] text-brand-slate">
              Copertina in arrivo
            </div>
          )
        }
      </div>
    </div>

    <div class="flex flex-1 flex-col gap-3 px-6 pb-6 pt-8 text-left">
      <div class="space-y-1">
        <h3 class="text-2xl font-serif text-brand-navy">{title}</h3>
        {
          subtitle ? (
            <p class="text-sm font-medium uppercase tracking-wide text-brand-slate">{subtitle}</p>
          ) : null
        }
      </div>

      <p class="text-sm font-semibold uppercase tracking-wide text-brand-charcoal/80">
        {authorsLabel}
      </p>

      {summary ? <p class="text-sm leading-relaxed text-brand-charcoal/70">{summary}</p> : null}

      {
        formattedPrice ? (
          <p class="text-sm font-semibold uppercase tracking-wide text-brand-navy">
            Prezzo: {formattedPrice}
          </p>
        ) : null
      }
    </div>
  </article>
</a>
