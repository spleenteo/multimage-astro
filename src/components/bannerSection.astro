---
import { Image } from '@datocms/astro/Image';
import { pickBaseColor, lightenColor, darkenColor, hexToRgba } from '~/lib/colors';
import type { AssetColor, ResponsiveImage } from '~/lib/datocms/types';

type BannerImage = (ResponsiveImage & { title?: string | null }) | null;

type Props = {
  id: string;
  title: string | null;
  contentHtml: string | null;
  link: string | null;
  imagePosition: 'left' | 'right';
  image: BannerImage;
  colors: AssetColor[] | null;
};

const { id, title, contentHtml, link, imagePosition, image, colors }: Props = Astro.props;

const resolvedTitle = title ?? 'Multimage';
const hasContent = typeof contentHtml === 'string' && contentHtml.length > 0;
const baseColor = pickBaseColor(colors);
const lightColor = lightenColor(baseColor, 0.24);
const gradientStart = hexToRgba(baseColor, 0.16);
const gradientEnd = hexToRgba(lightColor, 0.42);
const borderColor = hexToRgba(baseColor, 0.35);
const chipBackground = hexToRgba(baseColor, 0.22);
const chipText = darkenColor(baseColor, 0.4);
const buttonBackground = darkenColor(baseColor, 0.3);
const layoutDirectionClass = imagePosition === 'left' ? 'md:flex-row' : 'md:flex-row-reverse';
---

<section
  id={`banner-${id}`}
  class="relative overflow-hidden rounded-3xl border shadow-soft"
  style={{
    background: `linear-gradient(140deg, ${gradientStart}, ${gradientEnd})`,
    borderColor,
  }}
>
  <div class={`flex flex-col gap-10 ${layoutDirectionClass}`}>
    {
      image ? (
        <div
          class="relative flex w-full items-center justify-center overflow-hidden px-6 py-10 md:w-1/2 md:px-10 md:py-16"
          style={{
            backgroundColor: hexToRgba(baseColor, 0.12),
          }}
        >
          <Image
            data={image}
            sizes="(min-width: 1280px) 40vw, (min-width: 768px) 50vw, calc(100vw - 3rem)"
            pictureClass="flex h-full w-full items-center justify-center"
            imgClass="h-auto max-h-[420px] w-auto max-w-[600px] object-contain"
            imgStyle={{ objectFit: 'contain', maxWidth: '600px' }}
            loading="lazy"
          />
        </div>
      ) : null
    }
    <div class="flex w-full flex-col justify-center gap-6 px-6 py-10 md:w-1/2 md:px-12 md:py-16">
      <span
        class="inline-flex w-fit items-center rounded-full px-3 py-1 text-xs font-semibold uppercase tracking-[0.22em]"
        style={{
          backgroundColor: chipBackground,
          color: chipText,
        }}
      >
        In evidenza
      </span>
      <div class="space-y-4">
        <h2 class="text-3xl font-serif tracking-tight text-brand-charcoal md:text-4xl">
          {resolvedTitle}
        </h2>
        {
          hasContent ? (
            <div
              class="space-y-4 text-base leading-relaxed text-brand-charcoal/90 [&_a]:text-brand-navy [&_a:hover]:text-brand-sky [&_p]:m-0"
              set:html={contentHtml}
            />
          ) : null
        }
      </div>
      {
        link ? (
          <div>
            <a
              href={link}
              class="inline-flex items-center gap-2 rounded-full px-6 py-3 text-sm font-semibold uppercase tracking-wider text-white transition hover:brightness-105 focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-transparent"
              style={{
                backgroundColor: buttonBackground,
              }}
            >
              <span>Scopri di pi√π</span>
              <iconify-icon
                icon="iconoir:nav-arrow-right"
                width="18"
                height="18"
                aria-hidden="true"
              />
            </a>
          </div>
        ) : null
      }
    </div>
  </div>
</section>
