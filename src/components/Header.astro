---
import BooksSectionNav from './BooksSectionNav.astro';

type NavLink = {
  label: string;
  href?: string;
  external?: boolean;
  children?: Array<{ label: string; href: string; external?: boolean }>;
};

type Props = {
  currentPath: string;
  infoPages?: Array<{
    id: string;
    label: string;
    href: string;
  }>;
};

type TopLink = {
  label: string;
  href: string;
  icon: string;
  external?: boolean;
  tone?: string;
};

const TOP_LINKS: TopLink[] = [
  {
    label: 'Instagram',
    href: 'https://www.instagram.com/multimage_editrice/',
    icon: 'iconoir:instagram',
    external: true,
    tone: 'instagram',
  },
  {
    label: 'Twitter',
    href: 'https://twitter.com/multimageED',
    icon: 'iconoir:twitter',
    external: true,
    tone: 'twitter',
  },
  {
    label: 'Facebook',
    href: 'https://www.facebook.com/multimage/',
    icon: 'iconoir:facebook-tag',
    external: true,
    tone: 'facebook',
  },
  {
    label: 'Newsletter',
    href: 'https://multimage.us2.list-manage.com/subscribe?u=2e642198d3dca9633e51d015a&id=ff885584a7',
    icon: 'iconoir:mail',
    external: true,
    tone: 'newsletter',
  },
  {
    label: 'Diventa socio',
    href: '/info/adesioni',
    icon: 'iconoir:pen',
    tone: 'cta',
  },
] as const;

function buildPrimaryLinks(infoPages: Array<{ label: string; href: string }>): NavLink[] {
  const infoChildren = infoPages.length > 0 ? infoPages : [];

  return [
    {
      label: 'Libri',
      children: [
        { label: 'Collane', href: '/collane' },
        { label: 'In evidenza', href: '/libri/highlights' },
        { label: 'Catalogo', href: '/libri' },
        { label: 'Ebooks', href: '/libri/ebooks' },
        { label: 'Fuori catalogo', href: '/libri/archivio' },
      ],
    },
    { label: 'Autrici/Autori', href: '/autori' },
    { label: 'Distributori', href: '/distributori' },
    { label: 'Magazine', href: '/magazine' },
    {
      label: 'Informazioni',
      children: infoChildren.map((page) => ({
        label: page.label,
        href: page.href,
      })),
    },
  ];
}

const toneClassMap: Record<string, string> = {
  instagram: 'bg-social-instagram hover:bg-social-instagram/80 text-white',
  twitter: 'bg-social-twitter hover:bg-social-twitter/80 text-white',
  facebook: 'bg-social-facebook hover:bg-social-facebook/80 text-white',
  newsletter: 'bg-social-newsletter hover:bg-social-newsletter/80 text-white',
  cta: 'bg-brand-orange hover:bg-brand-crimson text-white',
};

const socialBaseClass =
  'inline-flex items-center gap-2 px-4 py-2 text-[0.65rem] font-semibold uppercase tracking-wider transition';

const { currentPath, infoPages = [] }: Props = Astro.props;
const PRIMARY_LINKS = buildPrimaryLinks(infoPages);

const normalizedPath =
  currentPath.endsWith('/') && currentPath !== '/' ? currentPath.slice(0, -1) : currentPath;

function linkIsActive(link: NavLink, pathname: string) {
  if (link.children && link.children.length > 0) {
    if (link.label === 'Libri') {
      return (
        pathname.startsWith('/libri') || pathname.startsWith('/collane') || pathname === '/collane'
      );
    }

    if (link.label === 'Magazine') {
      return pathname.startsWith('/magazine');
    }

    if (link.label === 'Informazioni') {
      return pathname.startsWith('/info');
    }

    return link.children.some((child) => pathname.startsWith(child.href));
  }

  if (!link.href) {
    return false;
  }

  if (link.href === '/') {
    return pathname === '/';
  }

  return pathname === link.href || pathname.startsWith(`${link.href}/`);
}

const showBooksNav = normalizedPath.startsWith('/libri') || normalizedPath.startsWith('/collane');
const year = new Date().getFullYear();
---

<header class="relative z-40 shadow-soft" data-header>
  <div class="hidden bg-brand-navy text-white md:block">
    <div
      class="container flex flex-wrap items-center justify-end gap-2 py-2 text-[0.65rem] font-semibold uppercase tracking-wider"
    >
      {
        TOP_LINKS.map(({ label, href, icon, external, tone }) => (
          <a
            href={href}
            target={external ? '_blank' : undefined}
            rel={external ? 'noreferrer' : undefined}
            class={`${socialBaseClass} ${tone ? toneClassMap[tone] : 'bg-brand-navy-light/40 hover:bg-brand-navy-light text-white'}`}
          >
            <iconify-icon icon={icon} width="16" height="16" aria-hidden="true" />
            <span>{label}</span>
          </a>
        ))
      }
    </div>
  </div>

  <div class="relative bg-brand-navy-light text-white">
    <div class="container flex items-center justify-between gap-4 py-6">
      <a href="/" class="flex flex-col items-start gap-2 md:flex-row md:items-center md:gap-4">
        <span class="relative block h-12 w-40">
          <img
            src="https://multimage.org/images/logo--white-f2946119.png"
            alt="Multimage"
            class="h-full w-full object-contain"
            loading="lazy"
          />
        </span>
        <span class="text-xs font-serif uppercase tracking-[0.3em] text-white md:text-sm">
          La casa editrice dei diritti umani
        </span>
      </a>

      <form data-search-form class="hidden items-center bg-white/10 pl-4 pr-1 text-sm md:flex">
        <iconify-icon
          icon="iconoir:search"
          width="16"
          height="16"
          class="text-white/80"
          aria-hidden="true"></iconify-icon>
        <input
          type="search"
          class="w-full bg-transparent px-2 py-2 text-white placeholder:text-white/60 focus:outline-none"
          placeholder="Cerca libri, autori..."
          aria-label="Cerca libri o autori"
        />
        <button
          type="submit"
          class="bg-white/20 px-4 py-2 text-xs font-semibold uppercase tracking-widest text-white transition hover:bg-white/30"
        >
          Cerca
        </button>
      </form>

      <button
        type="button"
        class="flex items-center gap-2 border border-white/40 px-4 py-2 text-xs font-semibold uppercase tracking-widest text-white transition hover:bg-white/10 md:hidden"
        aria-expanded="false"
        aria-controls="mobile-menu"
        data-menu-button
      >
        <iconify-icon
          icon="iconoir:menu"
          width="18"
          height="18"
          aria-hidden="true"
          data-menu-icon="closed"></iconify-icon>
        <iconify-icon
          icon="iconoir:cancel"
          width="18"
          height="18"
          aria-hidden="true"
          data-menu-icon="open"
          hidden></iconify-icon>
        <span class="text-xs font-semibold uppercase tracking-widest">Menu</span>
      </button>
    </div>

    <nav
      class="hidden border-t border-white/10 bg-brand-navy-light/90 text-white md:block"
      aria-label="Navigazione principale"
    >
      <ul
        class="container flex flex-col gap-4 py-4 text-sm font-serif uppercase tracking-[0.2em] md:flex-row md:items-center md:justify-end md:gap-6"
      >
        {
          PRIMARY_LINKS.map((link) => {
            const isActive = linkIsActive(link, normalizedPath);
            const hasChildren = Boolean(link.children && link.children.length > 0);

            return (
              <li class={`relative ${hasChildren ? 'group' : ''}`}>
                {hasChildren ? (
                  <>
                    <button
                      type="button"
                      class={`flex w-full items-center justify-between bg-white/10 px-5 py-3 text-left font-serif text-xs uppercase tracking-[0.2em] text-white transition hover:bg-white/15 focus:outline-none focus-visible:ring-2 focus-visible:ring-white md:w-auto md:bg-transparent md:px-3 md:py-3 md:text-sm ${
                        isActive ? 'md:text-brand-sand/80' : 'md:hover:text-brand-sand/80'
                      }`}
                    >
                      <span>{link.label}</span>
                      <iconify-icon
                        icon="iconoir:nav-arrow-down"
                        width="16"
                        height="16"
                        aria-hidden="true"
                      />
                    </button>
                    <div class="md:pointer-events-none md:absolute md:left-0 md:top-full md:mt-0 md:origin-top md:border md:border-brand-mist md:bg-white md:px-6 md:py-5 md:text-base md:shadow-xl md:transition md:duration-150 md:ease-out md:opacity-0 md:group-hover:pointer-events-auto md:group-hover:translate-y-0 md:group-hover:opacity-100">
                      <div class="space-y-2 md:min-w-[240px]">
                        {link.children?.map((child) => (
                          <a
                            href={child.href}
                            class="block px-3 py-2 font-serif text-sm uppercase tracking-[0.2em] text-brand-charcoal/90 transition hover:bg-brand-mist"
                          >
                            {child.label}
                          </a>
                        ))}
                      </div>
                    </div>
                  </>
                ) : (
                  <a
                    href={link.href ?? '#'}
                    class={`block px-5 py-3 font-serif text-xs uppercase tracking-[0.2em] transition hover:text-brand-sand/80 md:px-3 md:py-3 md:text-sm ${
                      isActive ? 'text-brand-sand/80' : 'text-white'
                    }`}
                  >
                    {link.label}
                  </a>
                )}
              </li>
            );
          })
        }
      </ul>
    </nav>

    <div
      class="fixed inset-0 z-50 hidden bg-brand-navy/95 backdrop-blur-sm md:hidden"
      role="dialog"
      aria-modal="true"
      id="mobile-menu"
      data-mobile-menu
    >
      <div class="flex h-full flex-col justify-between px-6 py-6 text-white">
        <div class="space-y-6 overflow-auto">
          <div class="flex items-center justify-between">
            <span class="text-sm font-semibold uppercase tracking-[0.3em]">Menu</span>
            <button
              type="button"
              class="flex items-center gap-2 border border-white/40 px-3 py-2 text-xs uppercase tracking-widest text-white"
              data-close-menu
            >
              <iconify-icon icon="iconoir:cancel" width="16" height="16" aria-hidden="true"
              ></iconify-icon>
              <span>Chiudi</span>
            </button>
          </div>

          <nav class="space-y-4" aria-label="Navigazione mobile">
            <ul class="space-y-4 text-sm font-serif uppercase tracking-[0.25em]">
              {
                PRIMARY_LINKS.map((link) => {
                  const hasChildren = Boolean(link.children && link.children.length > 0);
                  const isActive = linkIsActive(link, normalizedPath);

                  return (
                    <li data-mobile-accordion>
                      {hasChildren ? (
                        <>
                          <button
                            type="button"
                            class={`flex w-full items-center justify-between bg-white/10 px-4 py-3 text-left ${
                              isActive ? 'text-white' : 'text-white/90'
                            }`}
                            aria-expanded="false"
                            data-accordion-trigger
                          >
                            <span>{link.label}</span>
                            <iconify-icon
                              icon="iconoir:nav-arrow-down"
                              width="16"
                              height="16"
                              aria-hidden="true"
                            />
                          </button>
                          <div
                            class="hidden space-y-2 pl-4 text-xs tracking-[0.2em]"
                            data-accordion-panel
                          >
                            {link.children?.map((child) => (
                              <a
                                href={child.href}
                                class="block px-2 py-2 text-white/80 transition hover:text-white"
                                data-mobile-nav-target
                              >
                                {child.label}
                              </a>
                            ))}
                          </div>
                        </>
                      ) : (
                        <a
                          href={link.href ?? '#'}
                          class={`block bg-white/10 px-4 py-3 ${isActive ? 'text-white' : 'text-white/90'}`}
                          data-mobile-nav-target
                        >
                          {link.label}
                        </a>
                      )}
                    </li>
                  );
                })
              }
            </ul>
          </nav>

          <form data-search-form class="flex items-center bg-white/10 pl-4 pr-1 text-sm">
            <iconify-icon
              icon="iconoir:search"
              width="16"
              height="16"
              class="text-white/80"
              aria-hidden="true"></iconify-icon>
            <input
              type="search"
              class="w-full bg-transparent px-2 py-2 text-white placeholder:text-white/60 focus:outline-none"
              placeholder="Cerca libri, autori..."
              aria-label="Cerca libri o autori"
            />
            <button
              type="submit"
              class="bg-white/20 px-4 py-2 text-xs font-semibold uppercase tracking-widest text-white transition hover:bg-white/30"
            >
              Cerca
            </button>
          </form>

          <div class="space-y-3">
            <p class="text-xs font-semibold uppercase tracking-[0.3em] text-white/70">Seguici</p>
            <div class="flex flex-col gap-3">
              {
                TOP_LINKS.map(({ label, href, icon, external, tone }) => (
                  <a
                    href={href}
                    target={external ? '_blank' : undefined}
                    rel={external ? 'noreferrer' : undefined}
                    class={`flex items-center gap-3 px-4 py-3 text-xs uppercase tracking-[0.25em] ${
                      tone ? toneClassMap[tone] : 'bg-white/10'
                    }`}
                    data-mobile-nav-target
                  >
                    <iconify-icon icon={icon} width="16" height="16" aria-hidden="true" />
                    <span>{label}</span>
                  </a>
                ))
              }
            </div>
          </div>
        </div>

        <div class="text-xs uppercase tracking-[0.3em] text-white/60">
          © {year} Multimage Editrice
        </div>
      </div>
    </div>
  </div>

  {
    showBooksNav ? (
      <div class="border-t border-white/60 bg-white/80 py-4">
        <div class="container">
          <BooksSectionNav currentPath={normalizedPath} />
        </div>
      </div>
    ) : null
  }
</header>

<script type="module" is:inline>
  const header = document.querySelector('[data-header]');
  if (header) {
    const body = document.body;
    const menuButton = header.querySelector('[data-menu-button]');
    const mobileMenu = header.querySelector('[data-mobile-menu]');
    const closeMenuButtons = header.querySelectorAll('[data-close-menu]');
    const searchForms = header.querySelectorAll('form[data-search-form]');
    const accordionItems = header.querySelectorAll('[data-mobile-accordion]');
    const mq = window.matchMedia('(min-width: 768px)');

    const openIcon = header.querySelector('[data-menu-icon="open"]');
    const closedIcon = header.querySelector('[data-menu-icon="closed"]');

    const updateIcons = (open) => {
      if (openIcon && closedIcon) {
        if (open) {
          openIcon.removeAttribute('hidden');
          closedIcon.setAttribute('hidden', '');
        } else {
          closedIcon.removeAttribute('hidden');
          openIcon.setAttribute('hidden', '');
        }
      }
    };

    const lockScroll = () => {
      body.style.overflow = 'hidden';
    };

    const unlockScroll = () => {
      body.style.removeProperty('overflow');
    };

    const openMenu = () => {
      if (!mobileMenu || !menuButton) return;
      mobileMenu.classList.remove('hidden');
      menuButton.setAttribute('aria-expanded', 'true');
      updateIcons(true);
      lockScroll();
    };

    const closeMenu = () => {
      if (!mobileMenu || !menuButton) return;
      mobileMenu.classList.add('hidden');
      menuButton.setAttribute('aria-expanded', 'false');
      updateIcons(false);
      unlockScroll();
      accordionItems.forEach((item) => {
        const trigger = item.querySelector('[data-accordion-trigger]');
        const panel = item.querySelector('[data-accordion-panel]');
        if (trigger && panel) {
          trigger.setAttribute('aria-expanded', 'false');
          panel.classList.add('hidden');
        }
      });
    };

    menuButton?.addEventListener('click', () => {
      if (!mobileMenu) {
        return;
      }
      const isHidden = mobileMenu.classList.contains('hidden');
      if (isHidden) {
        openMenu();
      } else {
        closeMenu();
      }
    });

    closeMenuButtons.forEach((button) => {
      button.addEventListener('click', () => {
        closeMenu();
      });
    });

    mobileMenu?.addEventListener('click', (event) => {
      if (event.target === mobileMenu) {
        closeMenu();
      }
    });

    document.addEventListener('keydown', (event) => {
      if (event.key === 'Escape') {
        closeMenu();
      }
    });

    mq.addEventListener('change', (event) => {
      if (event.matches) {
        closeMenu();
      }
    });

    accordionItems.forEach((item) => {
      const trigger = item.querySelector('[data-accordion-trigger]');
      const panel = item.querySelector('[data-accordion-panel]');
      if (!trigger || !panel) {
        return;
      }

      trigger.addEventListener('click', () => {
        const isExpanded = trigger.getAttribute('aria-expanded') === 'true';
        trigger.setAttribute('aria-expanded', isExpanded ? 'false' : 'true');
        panel.classList.toggle('hidden', isExpanded);
      });
    });

    const buildSearchUrl = (query) => {
      const normalized = query.trim();
      if (!normalized) {
        return null;
      }
      const siteQuery = `${normalized} site:multimage.org`;
      return `https://www.google.com/search?q=${encodeURIComponent(siteQuery)}`;
    };

    searchForms.forEach((form) => {
      form.addEventListener('submit', (event) => {
        event.preventDefault();
        const input = form.querySelector('input[type="search"]');
        if (!input) {
          return;
        }
        const url = buildSearchUrl(input.value ?? '');
        if (!url) {
          return;
        }
        window.open(url, '_blank', 'noopener');
        closeMenu();
      });
    });

    const mobileTargets = header.querySelectorAll('[data-mobile-nav-target]');
    mobileTargets.forEach((link) => {
      link.addEventListener('click', () => {
        closeMenu();
      });
    });
  }
</script>
