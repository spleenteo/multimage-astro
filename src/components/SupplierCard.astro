---
import type { SupplierCardViewModel } from '~/lib/suppliers';

type Props = SupplierCardViewModel & {
  className?: string;
};

const {
  name,
  region,
  city,
  address,
  googleMapsUrl,
  telephone,
  email,
  website,
  description,
  logo,
  className = '',
}: Props = Astro.props;

const locationLabel = [region, city].filter((value) => value && value.length > 0).join(', ');
const hasAddress = Boolean(address);
const hasContacts = Boolean(
  (telephone ?? '').length > 0 || (email ?? '').length > 0 || (website ?? '').length > 0,
);

function normalizeWebsite(raw: string | null) {
  if (!raw) {
    return null;
  }

  const trimmed = raw.trim();
  if (trimmed.length === 0) {
    return null;
  }

  if (/^https?:\/\//i.test(trimmed)) {
    return trimmed;
  }

  return `https://${trimmed}`;
}

const websiteHref = normalizeWebsite(website);

function buildWebsiteLabel(url: string | null) {
  if (!url) {
    return null;
  }

  try {
    const parsed = new URL(url);
    return parsed.hostname.replace(/^www\./i, '').toUpperCase();
  } catch (error) {
    return url.replace(/^https?:\/\//i, '').toUpperCase();
  }
}

const websiteLabel = buildWebsiteLabel(websiteHref);

const logoWidth = logo?.width ?? 320;
const logoHeight = logo?.height ?? 320;
---

<article
  class={`flex flex-col gap-6 rounded-[2rem] border border-white/70 bg-white/95 px-6 py-8 shadow-soft transition duration-150 ease-out hover:-translate-y-1 hover:shadow-xl md:px-10 md:py-10 ${className}`.trim()}
>
  <div class="flex flex-col gap-6 md:flex-row md:items-start md:justify-between md:gap-10">
    <div class="flex-1 space-y-5">
      {
        locationLabel ? (
          <p class="text-xs font-semibold uppercase tracking-[0.4em] text-brand-sky">
            {locationLabel}
          </p>
        ) : null
      }

      <h3 class="text-3xl font-serif uppercase tracking-[0.08em] text-brand-navy">{name}</h3>

      {
        description ? (
          <p class="text-sm leading-relaxed text-brand-charcoal/75">{description}</p>
        ) : null
      }

      {
        hasAddress ? (
          <div class="flex flex-wrap items-center gap-3 text-xs font-semibold uppercase tracking-[0.28em] text-brand-charcoal/75">
            <iconify-icon
              icon="iconoir:pin-alt"
              width="18"
              height="18"
              aria-hidden="true"
              class="text-brand-sky"
            />
            {googleMapsUrl ? (
              <a
                href={googleMapsUrl}
                target="_blank"
                rel="noopener noreferrer"
                class="inline-flex items-center gap-2 text-brand-sky transition hover:text-brand-navy"
              >
                <span>{address}</span>
                <iconify-icon
                  icon="iconoir:external-link"
                  width="16"
                  height="16"
                  aria-hidden="true"
                />
              </a>
            ) : (
              <span>{address}</span>
            )}
          </div>
        ) : null
      }

      {
        hasContacts ? (
          <div class="flex flex-wrap items-center gap-x-2 gap-y-1 text-[0.7rem] font-semibold uppercase tracking-[0.28em] text-brand-charcoal/70">
            <iconify-icon
              icon="iconoir:link"
              width="18"
              height="18"
              aria-hidden="true"
              class="text-brand-sky"
            />
            {telephone ? <span>{telephone}</span> : null}
            {telephone && (email || websiteHref) ? <span class="text-brand-slate">•</span> : null}
            {email ? (
              <a href={`mailto:${email}`} class="text-brand-sky transition hover:text-brand-navy">
                {email}
              </a>
            ) : null}
            {email && websiteHref ? <span class="text-brand-slate">•</span> : null}
            {websiteHref ? (
              <a
                href={websiteHref}
                target="_blank"
                rel="noopener noreferrer"
                class="text-brand-sky transition hover:text-brand-navy"
              >
                {websiteLabel ?? 'SITO WEB'}
              </a>
            ) : null}
          </div>
        ) : null
      }
    </div>

    {
      logo?.url ? (
        <div class="flex shrink-0 items-start justify-end">
          <div class="rounded-3xl bg-white/80 px-4 py-3 shadow-inner">
            <img
              src={`${logo.url}?auto=compress&fit=max&w=280`}
              alt={logo.alt ?? name}
              width={logoWidth}
              height={logoHeight}
              loading="lazy"
              class="h-24 w-36 max-w-[220px] object-contain"
            />
          </div>
        </div>
      ) : null
    }
  </div>
</article>
