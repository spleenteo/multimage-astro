---
import { Image } from '@datocms/astro/Image';
import type { ResponsiveImageType } from '@datocms/astro/Image';
import Button from '~/components/ui/Button';

type CtaButtonWithImageBlockData = {
  title?: string | null;
  subtitle?: string | null;
  buttonLabel?: string | null;
  buttonUrl?: string | null;
  link?: string | null;
  button?: {
    url?: string | null;
    label?: string | null;
    primary?: boolean | null;
  } | null;
  image?: {
    url?: string | null;
    responsiveImage?:
      | ({
          alt?: string | null;
        } & Record<string, unknown>)
      | null;
  } | null;
};

type Props = {
  block: CtaButtonWithImageBlockData & Record<string, unknown>;
};

const { block }: Props = Astro.props;

const title = typeof block.title === 'string' && block.title.length > 0 ? block.title : 'Scopri di piÃ¹';
const subtitleRaw = typeof block.subtitle === 'string' ? block.subtitle : null;
const paragraphs = subtitleRaw
  ? subtitleRaw
      .split(/\r?\n\s*\r?\n/)
      .map((item) => item.trim())
      .filter((item) => item.length > 0)
  : [];

const buttonLabel =
  (typeof block.buttonLabel === 'string' && block.buttonLabel.length > 0
    ? block.buttonLabel
    : null) ??
  (typeof (block as Record<string, unknown>).button_label === 'string'
    ? ((block as Record<string, string>).button_label.length > 0
        ? (block as Record<string, string>).button_label
        : null)
    : null);

const explicitUrl =
  typeof block.buttonUrl === 'string' && block.buttonUrl.length > 0
    ? block.buttonUrl
    : typeof (block as Record<string, unknown>).button_url === 'string'
      ? ((block as Record<string, string>).button_url.length > 0
          ? (block as Record<string, string>).button_url
          : null)
      : null;

const linkedButton = block.button ?? null;
const linkedUrl =
  linkedButton && typeof linkedButton.url === 'string' && linkedButton.url.length > 0
    ? linkedButton.url
    : null;

const linkFromGenericField =
  typeof block.link === 'string' && block.link.length > 0 ? block.link : null;

const buttonHref = explicitUrl ?? linkedUrl ?? linkFromGenericField ?? null;

const imageData = block.image?.responsiveImage as ResponsiveImageType | null;

const showButton = Boolean(buttonLabel && buttonHref);
---

<section class="not-prose my-6 overflow-hidden rounded-2xl border border-brand-mist/40 bg-brand-mist/10 shadow-soft">
  <div class:list={["flex flex-col gap-6 md:flex-row"]}>
    {
      imageData ? (
        <div class="flex w-full flex-shrink-0 items-center justify-center bg-brand-mist/40 p-6 md:w-2/5">
          <Image
            data={imageData}
            sizes="(min-width: 1024px) 35vw, 90vw"
            pictureClass="block"
            imgClass="h-auto w-full max-w-xl rounded-xl object-cover"
          />
        </div>
      ) : null
    }

    <div class="flex w-full flex-col gap-4 px-6 pb-8 pt-6 md:w-full md:px-10 md:py-12">
      <h3 class="text-3xl font-serif text-brand-navy">{title}</h3>
      {
        paragraphs.length > 0 ? (
          <div class="space-y-3 text-base leading-relaxed text-brand-charcoal/90">
            {paragraphs.map((paragraph) => (
              <p>{paragraph}</p>
            ))}
          </div>
        ) : null
      }
      {
        showButton ? (
          <div>
            <Button href={buttonHref!}>
              {buttonLabel}
            </Button>
          </div>
        ) : buttonLabel ? (
          <p class="text-sm font-semibold uppercase tracking-wide text-brand-navy/70">{buttonLabel}</p>
        ) : null
      }
    </div>
  </div>
</section>
