---
import { Image } from '@datocms/astro/Image';
import type { ResponsiveImageType } from '@datocms/astro/Image';
import Button from '~/components/ui/Button';

type RawButtonBlock = {
  id: string;
  label?: string | null;
  url?: string | null;
  primary?: boolean | null;
};

type CtaButtonWithImageBlockData = {
  title?: string | null;
  content?: string | null;
  contentHtml?: string | null;
  buttons?: Array<RawButtonBlock | null> | null;
  image?: {
    url?: string | null;
    responsiveImage?:
      | ({
          alt?: string | null;
        } & Record<string, unknown>)
      | null;
  } | null;
};

type Props = {
  block: CtaButtonWithImageBlockData & Record<string, unknown>;
};

const { block }: Props = Astro.props;

const title =
  typeof block.title === 'string' && block.title.length > 0 ? block.title : 'Scopri di piÃ¹';
const contentPlain = typeof block.content === 'string' ? block.content : null;
const contentHtmlRaw = typeof block.contentHtml === 'string' ? block.contentHtml : null;
const contentHtml =
  contentHtmlRaw && contentHtmlRaw.trim().length > 0
    ? contentHtmlRaw
    : contentPlain && contentPlain.trim().length > 0
      ? `<p>${contentPlain.trim()}</p>`
      : null;
const buttons = (Array.isArray(block.buttons) ? block.buttons : [])
  .filter((btn): btn is RawButtonBlock => Boolean(btn && typeof btn.id === 'string'))
  .filter((btn) => {
    const label = typeof btn.label === 'string' ? btn.label.trim() : '';
    const url = typeof btn.url === 'string' ? btn.url.trim() : '';
    return label.length > 0 && url.length > 0;
  })
  .slice(0, 2)
  .map((btn) => ({
    id: btn.id,
    label: (btn.label as string).trim(),
    url: (btn.url as string).trim(),
    primary: btn.primary === true,
  }));
const hasButtons = buttons.length > 0;

const imageData = block.image?.responsiveImage as ResponsiveImageType | null;
const hasImage = Boolean(imageData);
---

<section
  class="not-prose my-6 overflow-hidden rounded-2xl border border-brand-mist/40 bg-brand-mist/10 shadow-soft"
>
  <div class:list={['flex flex-col gap-6', hasImage ? 'md:flex-row' : 'md:flex-col']}>
    {
      imageData ? (
        <div class="flex w-full flex-shrink-0 items-center justify-center bg-brand-mist/40 p-6 md:w-2/5">
          <Image
            data={imageData}
            sizes="(min-width: 1024px) 35vw, 90vw"
            pictureClass="block"
            imgClass="h-auto w-full max-w-xl rounded-xl object-cover"
          />
        </div>
      ) : null
    }

    <div
      class:list={[
        'flex w-full flex-col gap-5 px-6 pb-8 pt-6 md:px-10 md:py-12',
        hasImage ? 'md:w-3/5' : 'md:w-full',
      ]}
    >
      <h3 class="text-3xl font-serif text-brand-navy">{title}</h3>
      {contentHtml ? (
        <div
          class="prose prose-brand max-w-none text-base leading-relaxed text-brand-charcoal/90"
          set:html={contentHtml}
        />
      ) : null}
      {
        hasButtons ? (
          <div class="mt-2 flex flex-wrap items-center gap-3">
            {buttons.map((button) => (
              <Button href={button.url} primary={button.primary}>
                {button.label}
              </Button>
            ))}
          </div>
        ) : null
      }
    </div>
  </div>
</section>
